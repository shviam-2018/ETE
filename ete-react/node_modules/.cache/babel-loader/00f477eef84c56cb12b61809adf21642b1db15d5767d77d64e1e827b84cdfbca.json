{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shvia\\\\Desktop\\\\Projects\\\\ETE\\\\ete-react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]); // State to store messages\n  const [isVoiceMode, setIsVoiceMode] = useState(false); // State to determine if it's voice mode\n  const [isLoading, setIsLoading] = useState(false); // Loading state to prevent multiple submissions\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const userInput = input.trim();\n    const mode = isVoiceMode ? \"talk\" : \"chat\"; // Check if it's voice mode or text mode\n\n    if (!userInput || isLoading) return;\n    setIsLoading(true); // Set loading to true to avoid multiple submissions\n\n    try {\n      const response = await fetch('http://localhost:5000/api/message', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          input: userInput,\n          mode: mode\n        })\n      });\n      const data = await response.json();\n      setMessages(prevMessages => [...prevMessages, {\n        user: userInput,\n        bot: data.message\n      }]);\n      setInput(\"\"); // Clear input after sending\n    } catch (error) {\n      console.error(\"Error:\", error);\n    } finally {\n      setIsLoading(false); // Reset loading state after request\n    }\n  };\n  const handleVoiceInput = () => {\n    if (!isVoiceMode) return; // Only activate voice input in voice mode\n\n    // Example of using SpeechRecognition API for voice input (this could be enhanced further)\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.lang = 'en-US';\n    recognition.start();\n    recognition.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      setInput(transcript);\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error\", event);\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat with Thea\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsVoiceMode(false),\n        children: \"Chat Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsVoiceMode(true),\n        children: \"Voice Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message\",\n        disabled: isVoiceMode // Disable typing if in voice mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading,\n        children: isLoading ? \"Sending...\" : \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), isVoiceMode && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleVoiceInput,\n        children: \"\\uD83C\\uDFA4 Speak\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"You:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 16\n          }, this), \" \", msg.user]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Thea:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 16\n          }, this), \" \", msg.bot]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AcKxPR3acxV1eWSUDHKh3576X4s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","input","setInput","messages","setMessages","isVoiceMode","setIsVoiceMode","isLoading","setIsLoading","handleSubmit","e","preventDefault","userInput","trim","mode","response","fetch","method","headers","body","JSON","stringify","data","json","prevMessages","user","bot","message","error","console","handleVoiceInput","recognition","window","SpeechRecognition","webkitSpeechRecognition","lang","start","onresult","event","transcript","results","onerror","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","type","value","onChange","target","placeholder","disabled","map","msg","index","_c","$RefreshReg$"],"sources":["C:/Users/shvia/Desktop/Projects/ETE/ete-react/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]); // State to store messages\n  const [isVoiceMode, setIsVoiceMode] = useState(false); // State to determine if it's voice mode\n  const [isLoading, setIsLoading] = useState(false); // Loading state to prevent multiple submissions\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const userInput = input.trim();\n    const mode = isVoiceMode ? \"talk\" : \"chat\"; // Check if it's voice mode or text mode\n\n    if (!userInput || isLoading) return;\n\n    setIsLoading(true); // Set loading to true to avoid multiple submissions\n\n    try {\n      const response = await fetch('http://localhost:5000/api/message', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ input: userInput, mode: mode }),\n      });\n\n      const data = await response.json();\n      setMessages(prevMessages => [...prevMessages, { user: userInput, bot: data.message }]);\n      setInput(\"\"); // Clear input after sending\n    } catch (error) {\n      console.error(\"Error:\", error);\n    } finally {\n      setIsLoading(false); // Reset loading state after request\n    }\n  };\n\n  const handleVoiceInput = () => {\n    if (!isVoiceMode) return; // Only activate voice input in voice mode\n\n    // Example of using SpeechRecognition API for voice input (this could be enhanced further)\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.lang = 'en-US';\n\n    recognition.start();\n\n    recognition.onresult = (event) => {\n      const transcript = event.results[0][0].transcript;\n      setInput(transcript);\n    };\n\n    recognition.onerror = (event) => {\n      console.error(\"Speech recognition error\", event);\n    };\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Chat with Thea</h1>\n      \n      {/* Buttons for switching between voice and chat modes */}\n      <div>\n        <button onClick={() => setIsVoiceMode(false)}>Chat Mode</button>\n        <button onClick={() => setIsVoiceMode(true)}>Voice Mode</button>\n      </div>\n      \n      <form onSubmit={handleSubmit}>\n        {/* Input field for text input */}\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type your message\"\n          disabled={isVoiceMode} // Disable typing if in voice mode\n        />\n        \n        <button type=\"submit\" disabled={isLoading}>\n          {isLoading ? \"Sending...\" : \"Send\"}\n        </button>\n        \n        {/* Button to trigger voice input when in voice mode */}\n        {isVoiceMode && (\n          <button type=\"button\" onClick={handleVoiceInput}>\n            ðŸŽ¤ Speak\n          </button>\n        )}\n      </form>\n\n      {/* Displaying messages */}\n      <div>\n        {messages.map((msg, index) => (\n          <div key={index}>\n            <p><strong>You:</strong> {msg.user}</p>\n            <p><strong>Thea:</strong> {msg.bot}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}